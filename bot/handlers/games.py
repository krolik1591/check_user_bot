import asyncio
import json
import random
from pprint import pprint

from aiogram import F, Router, types
from aiogram.dispatcher.event.bases import SkipHandler
from aiogram.filters import Command, Text
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

router = Router()


# @router.my_chat_member(lambda member: member.new_chat_member.status == 'member')
# async def on_user_join(chat_member: types.ChatMemberUpdated, state: FSMContext):
#     bot_id = state.bot.id
#     if chat_member.new_chat_member.user.id == bot_id:
#         inviter_user_id = chat_member.from_user.id
#         admins = config.admin_ids
#         if str(inviter_user_id) not in admins:
#             await state.bot.send_message(chat_member.chat.id, "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –±–æ—Ç–∞!")
#             await state.bot.leave_chat(chat_member.chat.id)
#             return


@router.message(Command("casino"))
async def casino(message: types.Message):
    await add_user_to_db(message.from_user.id, message.from_user.username)

    user_num = message.text.removeprefix("/casino")
    try:
        user_num = int(user_num)
    except ValueError:
        await message.answer("–í–∏ –º–∞—î—Ç–µ –≤–≤–µ—Å—Ç–∏ /casino 'number' (–¥–µ number - —Ü—ñ–ª–µ —á–∏—Å–ª–æ)")
        return

    random_num = random.randint(0, 100)
    if user_num != random_num:
        await message.answer(f"–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏, —á–∏—Å–ª–æ –±—É–ª–æ {random_num}")
        return

    available_promo = await db.get_available_user_promo(message.from_user.id)
    if not available_promo:
        await message.answer("–í–∏ –≤–≥–∞–¥–∞–ª–∏!")
        return

    await db.add_new_promo_to_user(message.from_user.id, available_promo[0])
    await message.answer(f"–í–∏ –≤–∏–≥—Ä–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥! –î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤–≤–µ–¥—ñ—Ç—å –≤ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö /my_promos")


# available emoji for dice: üé≤, üéØ, üèÄ, ‚öΩÔ∏è, üé∞, üé≥
@router.message((F.chat.type.in_(['group', 'supergroup'])) and (lambda message: message.dice is not None))
async def play(message: types.Message):
    print('play')
    try:
        dice_value = message.dice.value
        emoji = message.dice.emoji
    except AttributeError:
        return
    await message.answer('–¢—É—Ç –±—É–¥–µ —Ç–µ–∫—Å—Ç')

    await add_user_to_db(message.from_user.id, message.from_user.username)

    await db.add_game_result(message.from_user.id, emoji, dice_value)


@router.message(Command("stats"))
async def stats(message: types.Message):
    await db.update_username(message.from_user.id, message.from_user.username)
    bowling_point, football_point, basket_point, points_sum, bowling_strike = await get_user_stats(message.from_user.id)

    player_lvl = ''
    for point, name in PLAYER_LVLS.items():
        if points_sum < point:
            player_lvl = name
            break

    username = message.from_user.username if message.from_user.username is not None else \
        await db.get_username_by_id(message.from_user.id)

    user_link = f'<a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a>'
    text = f"{user_link} –¢–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n" \
           f"‚öΩ –ó–∞–±–∏—Ç–æ –≥–æ–ª—ñ–≤: {football_point}\n" \
           f"üèÄ –ó–∞–∫–∏–Ω—É—Ç–æ –º'—è—á—ñ–≤: {basket_point}\n" \
           f"üé≥ –ó–±–∏—Ç–æ –∫–µ–≥–ª—ñ–≤: {bowling_point}\n" \
           f"       –°—Ç—Ä–∞–π–∫—ñ–≤: {bowling_strike}\n\n" \
           f"–¢–≤—ñ–π —Å—Ç–∞—Ç—É—Å –≥—Ä–∞–≤—Ü—è: {player_lvl}"

    await message.answer(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n{text}')


@router.message(Command("admin_stats"))
async def admin_stats(message: types.Message):
    admins = config.admin_ids
    if str(message.from_user.id) not in admins:
        await message.answer("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!")
        return

    result = {}

    user_ids = await db.get_unique_users()
    for user_id in user_ids:
        _, _, _, points_sum, _ = await get_user_stats(user_id)
        result[user_id] = points_sum

    sorted_result = dict(sorted(result.items(), key=lambda item: item[1], reverse=True))

    text = ''
    for index, (user_id, points_sum) in enumerate(sorted_result.items(), start=1):
        username = await db.get_username_by_id(user_id)
        user_link = f'<a href="tg://user?id={user_id}">{user_id}</a>'
        text += f"{index}. @{username} (id: {user_link}): {points_sum} –ø–æ—ñ–Ω—Ç—ñ–≤\n"

    await message.answer(f'–ê–¥–º—ñ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n{text}')


@router.message(Text(startswith="/roll_"))
async def roll_command(message: types.Message, state: FSMContext):
    await add_user_to_db(message.from_user.id, message.from_user.username)

    bot_username = '@' + (await state.bot.me()).username
    game = message.text.removeprefix("/roll_").removesuffix(bot_username)

    game_emoji = GAMES_LIST[game]
    msg = await message.answer_dice(emoji=game_emoji)
    await asyncio.sleep(DELAY_BEFORE_SEND_RESULT)

    await db.add_game_result(message.from_user.id, game_emoji, msg.dice.value)

    text = get_dice_text(game_emoji, msg.dice.value)
    await message.answer(text)


@router.callback_query(Text(startswith="roll_"))
async def roll_btn(call: types.CallbackQuery, state: FSMContext):
    await call.answer()

    await add_user_to_db(call.from_user.id, call.from_user.username)

    game = call.data.removeprefix("roll_")

    game_emoji = GAMES_LIST[game]
    msg = await call.message.answer_dice(emoji=game_emoji)
    await asyncio.sleep(DELAY_BEFORE_SEND_RESULT)

    await db.add_game_result(call.from_user.id, game_emoji, msg.dice.value)

    text = get_dice_text(game_emoji, msg.dice.value)
    await call.message.answer(text)


@router.message(Command("games"))
async def games(message: types.Message):
    text = '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —ñ–≥–æ—Ä:'
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üé≤', callback_data="roll_cube"),
         InlineKeyboardButton(text='üéØ', callback_data="roll_darts"),
         InlineKeyboardButton(text='üèÄ', callback_data="roll_basket")],
        [InlineKeyboardButton(text='‚öΩ', callback_data="roll_football"),
         InlineKeyboardButton(text='üé≥', callback_data="roll_bowling"),
         InlineKeyboardButton(text='üé∞', callback_data="roll_casino")],

    ])

    await message.answer(text, reply_markup=kb)


async def get_user_stats(user_id):
    all_stats = await db.get_user_stats(user_id)

    bowling_stat = all_stats.get('üé≥', '')
    bowling_strike = bowling_stat.count('6')
    bowling_point = bowling_stat.count('2') + \
                    bowling_stat.count('3') * 3 + \
                    bowling_stat.count('4') * 4 + \
                    bowling_stat.count('5') * 5 + \
                    bowling_stat.count('6') * 6
    football_point = sum(1 for char in all_stats.get('‚öΩ', '') if char in '345')
    basket_point = sum(1 for char in all_stats.get('üèÄ', '') if char in '45')
    points_sum = bowling_point + football_point + basket_point

    return bowling_point, football_point, basket_point, points_sum, bowling_strike
